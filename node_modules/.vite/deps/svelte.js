import {
  createRoot,
  hydrate,
  mount,
  unmount
} from "./chunk-VJRI4WPI.js";
import {
  current_component_context,
  flushSync,
  get_or_init_context_map,
  is_array,
  tick,
  unstate,
  untrack,
  user_effect
} from "./chunk-NEQIOBHS.js";
import "./chunk-PLGELRID.js";
import "./chunk-UUFBZM2J.js";
import "./chunk-LMPIC3TG.js";
import "./chunk-6WDZWUHI.js";

// node_modules/.pnpm/svelte@5.0.0-next.68/node_modules/svelte/src/main/main-client.js
function onMount(fn) {
  if (current_component_context === null) {
    throw new Error("onMount can only be used during component initialisation.");
  }
  if (current_component_context.r) {
    user_effect(() => {
      const cleanup = untrack(fn);
      if (typeof cleanup === "function")
        return (
          /** @type {() => void} */
          cleanup
        );
    });
  } else {
    init_update_callbacks(current_component_context).m.push(fn);
  }
}
function onDestroy(fn) {
  if (current_component_context === null) {
    throw new Error("onDestroy can only be used during component initialisation.");
  }
  onMount(() => () => untrack(fn));
}
function getContext(key) {
  const context_map = get_or_init_context_map();
  return (
    /** @type {T} */
    context_map.get(key)
  );
}
function setContext(key, context) {
  const context_map = get_or_init_context_map();
  context_map.set(key, context);
  return context;
}
function hasContext(key) {
  const context_map = get_or_init_context_map();
  return context_map.has(key);
}
function getAllContexts() {
  const context_map = get_or_init_context_map();
  return (
    /** @type {T} */
    context_map
  );
}
function create_custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  return new CustomEvent(type, { detail, bubbles, cancelable });
}
function createEventDispatcher() {
  const component_context = current_component_context;
  if (component_context === null) {
    throw new Error("createEventDispatcher can only be used during component initialisation.");
  }
  return (type, detail, options) => {
    var _a;
    const events = (
      /** @type {Record<string, Function | Function[]>} */
      (_a = component_context.s.$$events) == null ? void 0 : _a[
        /** @type {any} */
        type
      ]
    );
    if (events) {
      const callbacks = is_array(events) ? events.slice() : [events];
      const event = create_custom_event(
        /** @type {string} */
        type,
        detail,
        options
      );
      for (const fn of callbacks) {
        fn.call(component_context.x, event);
      }
      return !event.defaultPrevented;
    }
    return true;
  };
}
function beforeUpdate(fn) {
  if (current_component_context === null) {
    throw new Error("beforeUpdate can only be used during component initialisation");
  }
  if (current_component_context.r) {
    throw new Error("beforeUpdate cannot be used in runes mode");
  }
  init_update_callbacks(current_component_context).b.push(fn);
}
function afterUpdate(fn) {
  if (current_component_context === null) {
    throw new Error("afterUpdate can only be used during component initialisation.");
  }
  if (current_component_context.r) {
    throw new Error("afterUpdate cannot be used in runes mode");
  }
  init_update_callbacks(current_component_context).a.push(fn);
}
function init_update_callbacks(context) {
  return context.u ?? (context.u = { a: [], b: [], m: [] });
}
export {
  afterUpdate,
  beforeUpdate,
  createEventDispatcher,
  createRoot,
  flushSync,
  getAllContexts,
  getContext,
  hasContext,
  hydrate,
  mount,
  onDestroy,
  onMount,
  setContext,
  tick,
  unmount,
  unstate,
  untrack
};
//# sourceMappingURL=svelte.js.map
