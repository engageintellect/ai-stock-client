{
  "version": 3,
  "sources": ["../../.pnpm/chartjs@0.3.24/node_modules/chartjs/chart.js"],
  "sourcesContent": ["/*global module:true*/\n'use strict';\n\nMath.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n\nMath.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n\n(function() {\n  var Helpers = {\n    avg: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        v += arr[index];\n      }\n      return v / arr.length;\n    },\n    min: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0];\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 < v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    max: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.avg(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    upperMax: function(arr) {\n      var v = 0;\n      for (var index = 0; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (Array.isArray(v2)) v2 = Helpers.max(v2);\n        if (v2 > v) v = v2;\n      }\n      return Math.max(0, v);\n    },\n    lowerMin: function(arr) {\n      if (arr.length === 0) return 0;\n      var v = arr[0] || Infinity;\n      if (Array.isArray(v)) v = Helpers.lowerMin(v);\n      for (var index = 1; index < arr.length; ++index) {\n        var v2 = arr[index];\n        if (v2 == null) continue;\n        if (Array.isArray(v2)) v2 = Helpers.lowerMin(v2);\n        if (v2 < v) v = v2;\n      }\n      if (isNaN(v) || !isFinite(v)) v = 0;\n      return Math.max(0, v);\n    },\n    niceNumbers: function(range, round) {\n      var exponent = Math.floor(Math.log10(range));\n      var fraction = range / Math.pow(10, exponent);\n      var niceFraction;\n      if (round) {\n        if (fraction < 1.5) niceFraction = 1;\n        else if (fraction < 3) niceFraction = 2;\n        else if (fraction < 7) niceFraction = 5;\n        else niceFraction = 10;\n      } else {\n        if (fraction <= 1.0) niceFraction = 1;\n        else if (fraction <= 2) niceFraction = 2;\n        else if (fraction <= 5) niceFraction = 5;\n        else niceFraction = 10;\n      }\n      return niceFraction * Math.pow(10, exponent);\n    },\n    getLinearTicks: function(min, max, maxTicks) {\n      var range = Helpers.niceNumbers(max - min, false);\n      var tickSpacing = Helpers.niceNumbers(range / (maxTicks - 1), true);\n      return [\n        Math.floor(min / tickSpacing) * tickSpacing,\n        Math.ceil(max / tickSpacing) * tickSpacing,\n        tickSpacing\n      ];\n    },\n    getFont: function(options) {\n      options.style = options.style || 'normal';\n      options.variant = options.variant || 'normal';\n      options.weight = options.weight || 'lighter';\n      options.size = options.size || '12';\n      options.family = options.family || 'Arial';\n      return [options.style, options.variant, options.weight, options.size + 'px', options.family].join(' ');\n    },\n    getAxisRatio: function(min, max, value) {\n      return (value - min) / (max - min);\n    }\n  };\n\n  var BarChart = (function() {\n    function BarChart(ctx, options) {\n      this.mouseListeners = [];\n      this.currentHint = null;\n      this.fillRegions = []\n      this.options = {\n        font: 'Helvetica',\n        fontWeight: 'normal',\n        fontSizeTitle: 24,\n        fontSizeAxes: 20,\n        fontSizeTicks: 18,\n        fontSizeLabels: 18,\n        fontDataTags: 18,\n        fontSizeLegend: 18,\n        fontSizeHint: 18,\n        paddingPercentBars: 0.10,\n        paddingPercentTicks: 0.15,\n        paddingPixelsVertical: 10,\n        paddingPixelsHorizontal: 10,\n        paddingPixelsTicks: 10,\n        maxWidthBars: 0,\n        fillColorBackground: 'rgb(255, 255, 255)',\n        strokeColorBars: 'rgb(0, 0, 0)',\n        fillColorBars: 'rgba(180, 180, 180, 0.25)',\n        scaleStyle: 'linear',\n        barStyle: 'none',\n        stackedBarPadding: 3,\n        defaultMaxTick: 0,\n        pixelsLegendSquare: 10,\n        radiusDot: 5,\n        fillColorLegend: 'rgb(230, 230, 230)',\n        tickFormatter: null,\n        tickFormatterMeasure: null,\n        fillRegion: 'normal'\n      };\n      options = options || { };\n      for (var key in this.options) {\n        if (options.hasOwnProperty(key)) this.options[key] = options[key];\n      }\n      this.ctx = ctx;\n      this.content = { };\n      this.labelPositions = { }\n    }\n\n    BarChart.prototype.update = function(content) {\n      if (typeof content !== 'object') {\n        throw new Error('Collections must be objects.');\n      } else if (!(content.hasOwnProperty('labels') && content.hasOwnProperty('data'))) {\n        throw new Error('Collection must specify labels and data.');\n      } else if (!(Array.isArray(content.labels) && Array.isArray(content.data))) {\n        throw new Error('Labels and data must be arrays.');\n      } else if (content.labels.length !== content.data.length) {\n        throw new Error('Labels and data length must match.');\n      }\n      content._data_standard_deviation = [];\n      content._data_standard_error = [];\n      for (var i = 0; i < content.data.length; ++i) {\n        var isArr = Array.isArray(content.data[i]);\n        if (this.options.scaleStyle === 'log2') {\n          if (isArr) {\n            for (var i3 = 0; i3 < content.data[i].length; ++i3) content.data[i][i3] = Math.log2(content.data[i][i3]);\n          } else content.data[i] = Math.log2(content.data[i]);\n        }\n        if (isArr) {\n          var mean = Helpers.avg(content.data[i]);\n          var acc = 0;\n          for (var i2 = 0; i2 < content.data[i].length; ++i2) acc += Math.pow(mean - content.data[i][i2], 2);\n          acc = Math.sqrt(acc / (content.data[i].length - 1));\n          content._data_standard_deviation.push(acc);\n          content._data_standard_error.push(acc / Math.sqrt(content.data[i].length));\n        } else {\n          content._data_standard_deviation.push(0);\n          content._data_standard_error.push(0);\n        }\n      }\n      this.content = content;\n      this.redraw();\n    };\n\n    BarChart.prototype.redraw = function() {\n      setTimeout(function() {\n        this._draw();\n      }.bind(this), 0);\n    };\n\n    BarChart.prototype.mousemove = function(x, y) {\n      var res = null;\n      for (var index = 0; index < this.mouseListeners.length; ++index) {\n        if ((res = this.mouseListeners[index](x, y))) break;\n      }\n      if (!res || (typeof res) !== 'object' || !res.hasOwnProperty('index') || !res.hasOwnProperty('drawIndex')) {\n        if (this.currentHint !== null) {\n          this.currentHint = null;\n          this.redraw();\n        }\n        return;\n      }\n      var ch = this.currentHint;\n      if (ch == null || ch.index != res.index || ch.drawIndex != res.drawIndex) {\n        this.currentHint = res;\n        this.redraw();\n      }\n    };\n\n    BarChart.prototype._draw = function() {\n      var labelPositions = { }\n      this.mouseListeners = [];\n      this.fillRegions = [];\n\n      var options = this.options;\n      var ctx = this.ctx, content = this.content;\n      var width = ctx.canvas.width, height = ctx.canvas.height;\n      ctx.clearRect(0, 0, width, height);\n      ctx.translate(-0.5, -0.5);\n      var remainingWidth = width, remainingHeight = height;\n      var index;\n\n      if (options.fillColorBackground != null) {\n        ctx.save();\n        ctx.fillStyle = options.fillColorBackground;\n        ctx.fillRect(0, 0, width, height);\n        ctx.restore();\n      }\n\n      var topYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      /* Draw title of bar chart */\n      if (content.title != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTitle, family: options.font });\n        ctx.textAlign = 'center';\n        ctx.fillText(content.title, width / 2, topYPadding + options.fontSizeTitle);\n        ctx.restore();\n        remainingHeight -= options.fontSizeTitle * 1.25;\n        topYPadding += options.fontSizeTitle * 1.25;\n      }\n\n      /* Compute required left padding */\n      var leftXPadding = options.paddingPixelsVertical;\n      remainingWidth  -= options.paddingPixelsVertical;\n\n      var leftXDrawYLabel = null;\n      if (content.yAxis != null) {\n        leftXDrawYLabel = leftXPadding + options.fontSizeAxes * 0.5;\n        remainingWidth -= options.fontSizeAxes * 1.25;\n        leftXPadding += options.fontSizeAxes * 1.25;\n      }\n\n      ctx.save();\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      var maxChartValue, minChartValue;\n      if (options.barStyle === 'stacked') {\n        maxChartValue = 0;\n        minChartValue = Infinity;\n        for (var cmIndex = 0; cmIndex < content.data.length; ++cmIndex) {\n          var doB;\n          if (Array.isArray(doB = content.data[cmIndex])) {\n            var tempSum = 0;\n            for (var ii2 = 0; ii2 < doB.length; ++ii2) tempSum += doB[ii2];\n            maxChartValue = Math.max(maxChartValue, tempSum);\n            minChartValue = Math.min(minChartValue, tempSum);\n          } else {\n            maxChartValue = Math.max(maxChartValue, content.data[cmIndex]);\n            minChartValue = Math.min(minChartValue, content.data[cmIndex]);\n          }\n        }\n      } else {\n        maxChartValue = Helpers.upperMax(content.data);\n        minChartValue = Helpers.lowerMin(content.data);\n      }\n      if (options.scaleStyle.indexOf('adaptive') === 0) {\n        if (options.scaleStyle.indexOf(':') !== -1) {\n          var floater = parseFloat(options.scaleStyle.split(/[:]/)[1]);\n          minChartValue *= floater;\n          maxChartValue *= 1 + (1 - floater) / 2.0;\n        }\n      } else minChartValue = 0;\n      if (options.defaultMaxTick > maxChartValue) maxChartValue = options.defaultMaxTick;\n      if (content.bars != null && Array.isArray(content.bars)) {\n        for (index = 0; index < content.bars.length; ++index) {\n          var cbv = content.bars[index].value;\n          if (isNaN(cbv)) continue;\n          maxChartValue = Math.max(maxChartValue, cbv);\n          minChartValue = Math.min(minChartValue, cbv);\n        }\n      }\n      var maxYAxisTickWidth = options.scaleStyle == 'log2' ? Math.ceil(Math.pow(2, maxChartValue)) : (Math.ceil(maxChartValue) + '.00');\n      if (options.tickFormatterMeasure != null) maxYAxisTickWidth = options.tickFormatterMeasure;\n      maxYAxisTickWidth = ctx.measureText(maxYAxisTickWidth).width;\n      maxYAxisTickWidth = Math.ceil(maxYAxisTickWidth) + options.paddingPixelsTicks;\n      remainingWidth -= maxYAxisTickWidth;\n      leftXPadding += maxYAxisTickWidth;\n      ctx.restore();\n\n      var rightXPadding = options.paddingPixelsVertical;\n      remainingWidth -= options.paddingPixelsVertical;\n\n      /* Draw legend */\n      if (content.legend != null && Array.isArray(content.legend)) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLegend, family: options.font });\n        var maxLWidth = 0;\n        for (var lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          maxLWidth = Math.max(maxLWidth, ctx.measureText(content.legend[lIndex].label).width);\n        }\n        maxLWidth = Math.ceil(maxLWidth);\n        maxLWidth += options.pixelsLegendSquare + 8;\n        var legendEntriesPerLine = Math.floor((remainingWidth - options.paddingPixelsHorizontal * 2) / maxLWidth);\n        var lLReqHeight = Math.ceil(content.legend.length / legendEntriesPerLine) * options.fontSizeLegend * 1.5;\n        remainingHeight -= lLReqHeight;\n        bottomYPadding += lLReqHeight;\n\n        ctx.strokeStyle = 'rgb(0, 0, 0)';\n        ctx.fillStyle = options.fillColorLegend;\n        var bSX, bSY;\n        ctx.beginPath();\n        ctx.moveTo(bSX = leftXPadding, bSY = topYPadding + remainingHeight);\n        ctx.lineTo(bSX + remainingWidth, bSY);\n        ctx.lineTo(bSX + remainingWidth, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY + lLReqHeight);\n        ctx.lineTo(bSX, bSY);\n        ctx.stroke();\n        ctx.fill();\n\n        for (lIndex = 0; lIndex < content.legend.length; ++lIndex) {\n          var legLine = Math.floor(lIndex / legendEntriesPerLine);\n          var legCol = lIndex % legendEntriesPerLine;\n          ctx.fillStyle = content.legend[lIndex].color;\n          var boxX = bSX + legCol * maxLWidth + 3, boxY = bSY + legLine * options.fontSizeLegend * 1.5 + options.fontSizeLegend * 0.5;\n          ctx.beginPath();\n          ctx.moveTo(boxX, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY);\n          ctx.lineTo(boxX + options.pixelsLegendSquare, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY + options.pixelsLegendSquare);\n          ctx.lineTo(boxX, boxY);\n          ctx.fill();\n          ctx.stroke();\n\n          ctx.textAlign = 'left';\n          ctx.fillStyle = 'rgb(0, 0, 0)';\n          ctx.fillText(content.legend[lIndex].label, boxX + 3 + options.pixelsLegendSquare, boxY + options.fontSizeLegend * 0.5);\n        }\n\n        ctx.restore();\n      }\n\n      /* Draw x-axis label of bar chart */\n      var bottomYPadding = options.paddingPixelsHorizontal;\n      remainingHeight -= options.paddingPixelsHorizontal;\n      if (content.xAxis != null) {\n        ctx.save();\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.xAxis, (width - remainingWidth) + remainingWidth / 2, topYPadding + remainingHeight - bottomYPadding);\n        remainingHeight -= options.fontSizeAxes * 1.5;\n        bottomYPadding += options.fontSizeAxes * 1.5;\n        ctx.restore();\n      }\n\n      var widthPerBar = remainingWidth / content.data.length;\n\n      /* Draw x-axis top labels */\n      if (content.topLabels != null) {\n        ctx.save();\n        ctx.textAlign = 'center';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        remainingHeight -= options.fontSizeLabels * 1.5;\n        topYPadding += options.fontSizeLabels * 1.5;\n        for (index = 0; index < content.topLabels.length; ++index) {\n          ctx.fillText(\n            content.topLabels[index],\n            leftXPadding + index * widthPerBar + widthPerBar / 2,\n            topYPadding - options.fontSizeLabels / 2\n          );\n        }\n        ctx.restore();\n      }\n\n      /* Draw x-axis labels */\n      ctx.save();\n      var reqWidth = 0;\n      if (content.dataTags != null) {\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n        var dataTags = content.dataTags;\n        for (index = 0; index < dataTags.length; ++index) {\n          if (Array.isArray(dataTags[index])) {\n            for (var index2 = 0; index2 < dataTags[index].length; ++index2) {\n              reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index][index2]).width + 5));\n            }\n          } else {\n            reqWidth = Math.max(reqWidth, Math.ceil(ctx.measureText(dataTags[index]).width + 5));\n          }\n        }\n      }\n\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n      var computedBarPadding = Math.floor((widthPerBar * options.paddingPercentBars) / 2);\n      var wwh = widthPerBar - computedBarPadding * 2;\n      if (wwh < reqWidth) {\n        computedBarPadding -= Math.ceil((reqWidth - wwh) / 2);\n        computedBarPadding = Math.max(0, computedBarPadding);\n      } else if (options.maxWidthBars > 0 && wwh > options.maxWidthBars) {\n        computedBarPadding = Math.floor((widthPerBar - options.maxWidthBars) / 2);\n      }\n      var maxTextWidth = 0, maxTextStackSize = 1;\n      for (index = 0; index < content.labels.length; ++index) {\n        var tLabel = content.labels[index];\n        if (Array.isArray(tLabel)) {\n          maxTextStackSize = Math.max(maxTextStackSize, tLabel.length);\n          for (index2 = 0; index2 < tLabel.length; ++index2) {\n            maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel[index2]).width);\n          }\n        } else maxTextWidth = Math.max(maxTextWidth, ctx.measureText(tLabel).width);\n      }\n      var xLabelsRotated = false;\n      if (maxTextWidth > widthPerBar - computedBarPadding) {\n        ctx.textAlign = 'right';\n        ctx.rotate(Math.PI * 1.5);\n        xLabelsRotated = true;\n      } else {\n        ctx.textAlign = 'center';\n      }\n      var lastLabelY = -options.fontSizeLabels;\n      for (index = 0; index < content.labels.length; ++index) {\n        var cLabel = content.labels[index];\n        var x = leftXPadding + index * widthPerBar + widthPerBar / 2, y = topYPadding + remainingHeight - options.fontSizeLabels / 2;\n        if (xLabelsRotated) {\n          y = topYPadding + remainingHeight - maxTextWidth + 5;\n          y = [x, x = -y][0];\n\n          if (y < lastLabelY + options.fontSizeLabels) continue;\n          lastLabelY = y;\n        }\n        var yUp = options.fontSizeLabels * (maxTextStackSize - 1);\n        if (Array.isArray(cLabel)) {\n          if (xLabelsRotated) {\n            yUp = options.fontSizeLabels * (cLabel.length - 1.5);\n            yUp /= 2;\n          }\n          for (index2 = 0; index2 < cLabel.length; ++index2) {\n            ctx.fillText(cLabel[index2], x, y - yUp);\n            yUp -= options.fontSizeLabels;\n          }\n        } else {\n          if (xLabelsRotated) yUp = -options.fontSizeLabels * 0.25;\n          ctx.fillText(cLabel, x, y - yUp);\n        }\n      }\n      if (xLabelsRotated) {\n        remainingHeight -= maxTextWidth + 5;\n        bottomYPadding += maxTextWidth + 5;\n      } else {\n        var remVal = options.fontSizeLabels * maxTextStackSize;\n        remVal += options.fontSizeLabels * 0.5;\n        remainingHeight -= remVal;\n        bottomYPadding += remVal;\n      }\n      ctx.restore();\n\n      /* Draw boundaries */\n      var boundX1 = leftXPadding, boundX2 = leftXPadding + remainingWidth;\n      var boundY1 = topYPadding, boundY2 = topYPadding + remainingHeight;\n\n      for (index = 0; index < content.labels.length; ++index) labelPositions[index] = {\n        xStart: leftXPadding + index * widthPerBar,\n        xEnd: leftXPadding + (1 + index) * widthPerBar,\n        yStart: boundY1, yEnd: boundY2\n      }\n\n      ctx.save();\n      ctx.strokeStyle = 'rgb(0, 0, 0)';\n      ctx.beginPath();\n      if (content.topLabels != null) {\n        ctx.moveTo(boundX2, boundY1);\n        ctx.lineTo(boundX1, boundY1);\n      } else {\n        ctx.moveTo(boundX1, boundY1);\n      }\n      ctx.lineTo(boundX1, boundY2);\n      ctx.lineTo(boundX2, boundY2);\n      if (content.topLabels != null) ctx.lineTo(leftXPadding + remainingWidth, topYPadding);\n      ctx.stroke();\n      ctx.restore();\n\n      /* Draw top label */\n      if (content.topLabel != null) {\n        ctx.save();\n        ctx.textAlign = 'right';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n        ctx.fillText(content.topLabel, leftXPadding - 3, topYPadding - options.fontSizeLabels / 2);\n        ctx.restore();\n      }\n\n      /* Draw y-axis label of bar chart */\n      if (content.yAxis != null) {\n        ctx.save();\n        ctx.rotate(Math.PI * 1.5);\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeAxes, family: options.font });\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.textAlign = 'center';\n        ctx.fillText(content.yAxis, -(topYPadding + remainingHeight / 2), leftXDrawYLabel);\n        ctx.restore();\n      }\n\n      /* Draw y-axis labels */\n      ctx.save();\n      ctx.fillStyle = 'rgb(0, 0, 0)';\n      ctx.strokeStyle = 'rgba(0, 0, 0, 0.20)';\n      ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeTicks, family: options.font });\n      ctx.textAlign = 'right';\n      var tickMeta = Helpers.getLinearTicks(0, maxChartValue, Math.max(2, remainingHeight / (options.fontSizeTicks * (1 + options.paddingPercentTicks))));\n      var alpha = maxChartValue / options.fontSizeTicks;\n      maxChartValue = tickMeta[1];\n      if (maxChartValue > 1) maxChartValue += Math.ceil(alpha);\n      else maxChartValue += alpha;\n      var ticks = [];\n      while (tickMeta[0] <= tickMeta[1]) {\n        ticks.push(tickMeta[0]);\n        tickMeta[0] += tickMeta[2];\n      }\n      for (index = 0; index < ticks.length; ++index) {\n        var tickHeight = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, ticks[index]));\n        if (tickHeight < 0) continue;\n        if (options.scaleStyle == 'log2' && ticks[index] !== 0) ticks[index] = Math.round(Math.pow(2, ticks[index]));\n        else ticks[index] = Math.floor(ticks[index] * 100) / 100;\n        if (options.tickFormatter != null && typeof options.tickFormatter === 'function') {\n          ctx.fillText(options.tickFormatter(ticks[index]).toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        } else {\n          ctx.fillText(ticks[index].toString(), leftXPadding - options.paddingPixelsTicks, topYPadding + remainingHeight - tickHeight);\n        }\n        if (index == 0) continue;\n        ctx.beginPath();\n        ctx.moveTo(leftXPadding, topYPadding + remainingHeight - tickHeight);\n        ctx.lineTo(leftXPadding + remainingWidth, topYPadding + remainingHeight - tickHeight);\n        ctx.stroke();\n      }\n      ctx.restore();\n\n      if (content.bars != null && Array.isArray(content.bars)) {\n        ctx.save();\n        for (index = 0; index < content.bars.length; ++index) {\n          var cBar = content.bars[index];\n          if (cBar.value > maxChartValue) continue;\n          var renderBarY = topYPadding + remainingHeight - Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, cBar.value));\n          ctx.strokeStyle = cBar.style;\n          ctx.fillStyle = cBar.style;\n          ctx.beginPath();\n          ctx.moveTo(boundX1, renderBarY);\n          ctx.lineTo(boundX2, renderBarY);\n          ctx.stroke();\n          ctx.fill();\n        }\n        ctx.restore();\n      }\n\n      /* Draw bars */\n      ctx.save();\n      var lastData = null;\n      for (index = 0; index < content.data.length; ++index) {\n        var fillColorForIndex = null;\n        var strokeColorForIndex = null;\n        if (content.fillColor != null) {\n          if (Array.isArray(content.fillColor)) fillColorForIndex = ctx.fillStyle = content.fillColor[index];\n          else ctx.fillStyle = content.fillColor;\n        } else ctx.fillStyle = options.fillColorBars;\n        if (content.strokeColor != null) {\n          if (Array.isArray(content.strokeColor)) strokeColorForIndex = ctx.strokeStyle = content.strokeColor[index];\n          else ctx.strokeStyle = content.strokeColor;\n        } else ctx.strokeStyle = options.strokeColorBars;\n        var v = content.data[index];\n        var vIsArr = Array.isArray(v);\n        var renderStartX = leftXPadding + widthPerBar * index;\n        if (vIsArr && options.barStyle === 'stacked') {\n          var runningValue = 0, lastHeight = 0;\n          for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n            if (fillColorForIndex != null && Array.isArray(fillColorForIndex)) {\n              ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n            }\n            if (strokeColorForIndex != null && Array.isArray(strokeColorForIndex)) {\n              ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n            }\n\n            runningValue += v[drawIndex];\n            var renderBarHeight = Math.floor(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, runningValue));\n            var renderUpToY = topYPadding + remainingHeight - renderBarHeight;\n            if (Math.abs(renderBarHeight - lastHeight) < options.stackedBarPadding + 2) {\n              lastHeight = renderBarHeight;\n              continue;\n            }\n\n            var barPadP = drawIndex > 0 ? options.stackedBarPadding : 0;\n            var tSX, tSY;\n            var tEX, tEY;\n            ctx.beginPath();\n            ctx.moveTo(tSX = renderStartX + computedBarPadding, tSY = topYPadding + remainingHeight - lastHeight - barPadP);\n            ctx.lineTo(renderStartX + computedBarPadding, renderUpToY);\n            ctx.lineTo(tEX = renderStartX + (widthPerBar - 1) - computedBarPadding, tEY = renderUpToY);\n            ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight - lastHeight - barPadP);\n            if (drawIndex > 0) ctx.lineTo(tSX, tSY);\n            ctx.stroke();\n            ctx.fill();\n            var hint;\n            if (content.hints != null && content.hints[index] != null && (hint = content.hints[index][drawIndex]) != null) {\n              this.mouseListeners.push(function(index, drawIndex, hint, sx, sy, ex, ey, x, y) {\n                var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n                var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n                if (x < minX || x > maxX || y < minY || y > maxY) return null;\n                return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n              }.bind(this, index, drawIndex, hint, tSX, tSY, tEX, tEY));\n            }\n\n            var tagText;\n            if (tSY - renderUpToY > options.fontDataTags * 1.25 && content.dataTags != null && (tagText = content.dataTags[index]) != null && (tagText = tagText[drawIndex]) != null) {\n              var oFS = ctx.fillStyle;\n              ctx.fillStyle = 'rgb(0, 0, 0)';\n              ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontDataTags, family: options.font });\n              ctx.textAlign = 'center';\n              ctx.fillText(tagText, renderStartX + widthPerBar / 2, tSY - options.fontDataTags * 0.25);\n              ctx.fillStyle = oFS;\n            }\n\n            lastHeight = renderBarHeight;\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY - 3);\n          }\n        } else if (options.barStyle === 'line') {\n          if (vIsArr) {\n            var rbx = renderStartX + widthPerBar / 2;\n\n            var lDu;\n            if (options.fillRegion === 'background') {\n              lDu = lastData;\n              if (Array.isArray(lDu)) lDu = lDu[0];\n              if (lDu != null) {\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n\n            var nLData = [];\n            for (var drawIndex = 0; drawIndex < v.length; ++drawIndex) {\n              var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v[drawIndex]));\n              var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n              var rby = renderUpToY3;\n              if (lastData != null) {\n                var tLX, tLY;\n                if (Array.isArray(lastData)) {\n                  tLX = (lastData[drawIndex] || { }).x;\n                  tLY = (lastData[drawIndex] || { }).y;\n                } else {\n                  tLX = lastData.x;\n                  tLY = lastData.y;\n                }\n\n                if (tLX && tLY) {\n                  if (Array.isArray(strokeColorForIndex)) {\n                    ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n                  } else ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n\n              if (Array.isArray(fillColorForIndex)) {\n                ctx.fillStyle = fillColorForIndex[drawIndex] || options.fillColorBars;\n              }\n              if (Array.isArray(strokeColorForIndex)) {\n                ctx.strokeStyle = strokeColorForIndex[drawIndex] || options.strokeColorBars;\n              }\n\n              ctx.beginPath();\n              ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n              ctx.stroke();\n              ctx.fill();\n\n              nLData[drawIndex] = { x: rbx, y: rby, color: ctx.fillStyle };\n            }\n            lastData = nLData;\n            if (lDu != null && lDu.color != lastData[0].color) this.fillRegions.push({\n              x: lastData[0].x,\n              y: lastData[0].y,\n              prev: lDu.color,\n              next: lastData[0].color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          } else {\n            var renderBarHeight3 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n            var renderUpToY3 = topYPadding + remainingHeight - renderBarHeight3;\n\n            var rbx = renderStartX + widthPerBar / 2, rby = renderUpToY3;\n            var lDu;\n            if (options.fillRegion === 'background') {\n              if (lastData != null) {\n                lDu = lastData;\n                if (Array.isArray(lDu)) lDu = lDu[0];\n                var sFS = ctx.fillStyle\n                ctx.fillStyle = lDu.color\n                ctx.fillRect(lDu.x, boundY1, rbx - lDu.x, boundY2 - boundY1)\n                ctx.fillStyle = sFS\n              }\n            }\n            ctx.beginPath();\n            ctx.arc(rbx, rby, options.radiusDot, 0, 2 * Math.PI);\n            ctx.stroke();\n            ctx.fill();\n\n            if (lastData != null) {\n              if (Array.isArray(lastData)) {\n                var tLX, tLY;\n                for (var key in lastData) {\n                  if (!lastData.hasOwnProperty(key)) continue;\n                  tLX = lastData[key].x;\n                  tLY = lastData[key].y;\n                  if (tLX && tLY) {\n                    ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                    ctx.beginPath();\n                    ctx.moveTo(tLX, tLY);\n                    ctx.lineTo(rbx, rby);\n                    ctx.stroke();\n                  }\n                }\n              } else {\n                var tLX = lastData.x, tLY = lastData.y;\n                if (tLX && tLY) {\n                  ctx.strokeStyle = strokeColorForIndex || 'rgb(0, 0, 0)';\n                  ctx.beginPath();\n                  ctx.moveTo(tLX, tLY);\n                  ctx.lineTo(rbx, rby);\n                  ctx.stroke();\n                }\n              }\n            }\n\n            lastData = { x: rbx, y: rby, color: ctx.fillStyle };\n            if (lDu != null && lDu.color != lastData.color) this.fillRegions.push({\n              x: lastData.x,\n              y: lastData.y,\n              prev: lDu.color,\n              next: lastData.color\n            })\n\n            if (content.balls != null && Array.isArray(content.balls) && index < content.balls.length) {\n              var ball = content.balls[index]\n              if (ball != null) {\n                ctx.beginPath();\n                ctx.fillStyle = ball.fill;\n                ctx.strokeStyle = ball.stroke;\n                ctx.arc(rbx, topYPadding + remainingHeight - (remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, minChartValue + ball.value)), ball.radius, 0, 2 * Math.PI);\n                ctx.stroke();\n                ctx.fill();\n              }\n            }\n          }\n\n          var hint;\n          if (content.hints != null && (hint = content.hints[index]) != null) {\n            this.mouseListeners.push(function(index, hint, sx, sy, ex, ey, x, y) {\n              var minX = Math.min(sx, ex), maxX = Math.max(sx, ex);\n              var minY = Math.min(sy, ey), maxY = Math.max(sy, ey);\n              if (x < minX || x > maxX || y < minY || y > maxY) return null;\n              return { index: index, drawIndex: drawIndex, rect: { left: minX, right: maxX, top: minY, bottom: maxY }, text: hint.split('\\n') };\n            }.bind(this, index, hint, rbx - 1, topYPadding, rbx + 1, topYPadding + remainingHeight));\n          }\n        } else {\n          if (vIsArr) v = Helpers.avg(v);\n          var renderBarHeight2 = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, v));\n          var renderUpToY2 = topYPadding + remainingHeight - renderBarHeight2;\n          ctx.beginPath();\n          ctx.moveTo(renderStartX + computedBarPadding, topYPadding + remainingHeight);\n          ctx.lineTo(renderStartX + computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, renderUpToY2);\n          ctx.lineTo(renderStartX + (widthPerBar - 1) - computedBarPadding, topYPadding + remainingHeight);\n          ctx.stroke();\n          ctx.fill();\n\n          if (options.barStyle === 'error') {\n            var val;\n            if ((val = content._data_standard_error[index]) != 0) {\n              var renderBarError = Math.round(remainingHeight * Helpers.getAxisRatio(minChartValue, maxChartValue, val));\n              ctx.beginPath();\n              var wiskerWidth = Math.round((widthPerBar - computedBarPadding * 2) / 8);\n              var x_ = leftXPadding + widthPerBar * index + widthPerBar / 2;\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 + renderBarError);\n              ctx.moveTo(x_, renderUpToY2 + renderBarError);\n              ctx.lineTo(x_, renderUpToY2 - renderBarError);\n              ctx.moveTo(x_ - wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.lineTo(x_ + wiskerWidth, renderUpToY2 - renderBarError);\n              ctx.stroke();\n            }\n          }\n\n          if (content.barTooltips != null) {\n            ctx.fillStyle = 'rgb(0, 0, 0)';\n            ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeLabels, family: options.font });\n            ctx.textAlign = 'center';\n            ctx.fillText(content.barTooltips[index] || '', renderStartX + widthPerBar / 2, renderUpToY2 - 3);\n          }\n        }\n      }\n      ctx.restore();\n\n      if (this.currentHint != null) {\n        ctx.save();\n        var hRect = this.currentHint.rect, hints = this.currentHint.text;\n        ctx.fillStyle = 'rgb(0, 0, 0)';\n        ctx.font = Helpers.getFont({ weight: options.fontWeight, size: options.fontSizeHint, family: options.font });\n        ctx.textAlign = 'left';\n        var boxWidth = 0;\n        for (index = 0; index < hints.length; ++index) {\n          boxWidth = Math.max(boxWidth, Math.ceil(ctx.measureText(hints[index]).width));\n        }\n        var boxWidthPadding = 5;\n        var lineHeight = options.fontSizeHint * 1.5;\n        var boxHeight = hints.length * lineHeight;\n        var drawX = hRect.right + 10, drawY = (hRect.top + hRect.bottom) / 2;\n        boxWidth += boxWidthPadding * 2;\n        if (drawX + boxWidth > width) {\n          drawX = hRect.left - boxWidth - 10;\n        }\n        if (drawY - boxHeight / 2 < 0) {\n          drawY = Math.ceil(boxHeight / 2) + 1;\n        } else if (drawY + boxHeight / 2 > height) {\n          drawY = height - boxHeight / 2 - 1;\n        }\n        ctx.clearRect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.beginPath();\n        ctx.rect(drawX, drawY - boxHeight / 2, boxWidth, boxHeight);\n        ctx.stroke();\n        for (index = 0; index < hints.length; ++index) {\n          ctx.fillText(hints[index], drawX + boxWidthPadding, drawY - boxHeight / 2 + options.fontSizeHint + index * lineHeight);\n        }\n        ctx.restore();\n      }\n\n      ctx.translate(0.5, 0.5);\n\n      this.labelPositions = labelPositions;\n    };\n\n    return BarChart;\n  })();\n\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = BarChart;\n  } else {\n    window.BarChart = BarChart;\n  }\n})();\n"],
  "mappings": "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",
  "names": ["BarChart", "index", "drawIndex", "hint", "x", "y"]
}
